# Pylabs specific settings
QINCLUDE=/opt/qbase3/include
QLIB=/opt/qbase3/lib64
QRPATH=-rpath=$(QLIB)
QLINKER=-dynamic-linker=$(QLIB)/ld-linux-x86-64.so.2

# generated by ./configure --no-tk --with-pthread --prefix /opt/qbase3
PREFIX=/opt/qbase3
BINDIR=$(PREFIX)/bin
LIBDIR=/opt/qbase3/lib/ocaml
STUBLIBDIR=$(LIBDIR)/stublibs
MANDIR=$(PREFIX)/man
MANEXT=1
RANLIB=ranlib
RANLIBCMD=ranlib
SHARPBANGSCRIPTS=true
BNG_ARCH=amd64
BNG_ASM_LEVEL=1
PTHREAD_LINK=-cclib -lpthread
X11_INCLUDES=
X11_LINK=not found
DBM_INCLUDES=not found
DBM_LINK=not found
TK_DEFS=
TK_LINK=
BYTECC=/opt/qbase3/bin/gcc
BYTECCCOMPOPTS=-fno-defer-pop -Wall -D_FILE_OFFSET_BITS=64 -D_REENTRANT -isystem $(QINCLUDE)
BYTECCLINKOPTS= -Wl,-E -Wl,$(QLINKER) -Wl,$(QRPATH)
BYTECCLIBS= -lm  -ldl  -lpthread -lncurses
BYTECCRPATH=-Wl,-rpath,
EXE=
SUPPORTS_SHARED_LIBRARIES=true
SHAREDCCCOMPOPTS=-fPIC
MKSHAREDLIBRPATH=-Wl,-rpath,
NATDYNLINKOPTS=-Wl,-E
SYSLIB=-l$(1)
#ml let syslib x = "-l"^x;;

### How to build a static library
MKLIB=ar rc $(1) $(2); ranlib $(1)
#ml let mklib out files opts = Printf.sprintf "ar rc %s %s %s; ranlib %s" out opts files out;;
ARCH=amd64
MODEL=default
SYSTEM=linux
NATIVECC=/opt/qbase3/bin/gcc
NATIVECCCOMPOPTS=-Wall -D_FILE_OFFSET_BITS=64 -D_REENTRANT -isystem $(QINCLUDE)
NATIVECCPROFOPTS=-Wall -D_FILE_OFFSET_BITS=64 -D_REENTRANT -isystem $(QINCLUDE)
NATIVECCLINKOPTS=$(QRPATH) $(QLINKER)
NATIVECCRPATH=-Wl,-rpath,
NATIVECCLIBS= -lm  -ldl -lncurses
ASM=/opt/qbase3/bin/as
ASPP=$(NATIVECC) -c
ASPPPROFFLAGS=-DPROFILING
PROFILING=prof
DYNLINKOPTS= -ldl
OTHERLIBRARIES=unix str num dynlink bigarray systhreads threads
DEBUGGER=ocamldebugger
CC_PROFILE=-pg
SYSTHREAD_SUPPORT=true
PARTIALLD=/opt/qbase3/bin/ld -r $(QRPATH) $(QLINKER)
PACKLD=$(PARTIALLD) $(NATIVECCLINKOPTS) -o 
DLLCCCOMPOPTS=
IFLEXDIR=
O=o
A=a
SO=so
EXT_OBJ=.o
EXT_ASM=.s
EXT_LIB=.a
EXT_DLL=.so
EXTRALIBS=
CCOMPTYPE=cc
TOOLCHAIN=cc
CMXS=cmxs
MKEXE=$(BYTECC) -Wl,$(QLINKER) -Wl,$(QRPATH)
MKDLL=$(NATIVECC) -shared -Wl,$(QRPATH) -Wl,$(QLINKER)
MKMAINDLL=$(NATIVECC) -shared -Wl,$(QRPATH) -Wl,$(QLINKER)
